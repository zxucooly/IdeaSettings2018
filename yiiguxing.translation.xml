<application>
  <component name="AppStorage">
    <histories>
      <item value="Determine whether the given listener supports the given event. * &lt;p&gt;The default implementation detects the {@link SmartApplicationListener} * and {@link GenericApplicationListener} interfaces. In case of a standard * {@link ApplicationListener}, a {@link GenericApplicationListenerAdapter} * will be used to introspect the generically declared type of the target listener." />
      <item value="detects" />
      <item value="Helper class that encapsulates a specific set of target listeners, * allowing for efficient retrieval of pre-filtered listeners. * &lt;p&gt;An instance of this helper gets cached per event type and source type." />
      <item value="retriever" />
      <item value="Explicitly remove target for a proxy, if registered already, // in order to avoid double invocations of the same listener." />
      <item value="default Retriever" />
      <item value="Retriever" />
      <item value="Explicitly" />
      <item value="Event published as early as conceivably possible as soon as a {@link SpringApplication} * has been started - before the {@link Environment} or {@link ApplicationContext} is * available, but after the {@link ApplicationListener}s have been registered. The source * of the event is the {@link SpringApplication} itself, but beware of using its internal * state too much at this early stage since it might be modified later in the lifecycle. *" />
      <item value="Resolve the single type argument of the given generic interface against * the given target class which is assumed to implement the generic interface * and possibly declare a concrete type for its type variable." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="9" />
        <entry key="ENGLISH" value="10" />
      </map>
    </option>
  </component>
</application>